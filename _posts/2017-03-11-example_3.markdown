---
layout: post
title:  "Example 3"
date:   2017-03-11 20:11:10 -0600
categories: d3
jsarr:
- js/d3.tip.v0.6.3.js
---

Testing D3 example here:

<div id="d3example3"></div>

<style>

.node {
  fill: #fff;
  stroke: #555;
  stroke-width: 1.75px;
}
.node-active{
  fill: #ddd;
  stroke-opacity: 1;
  stroke: #555;
  stroke-width: 1.75px;
}
.link {
  stroke: #555;
  stroke-opacity: .3;
  fill: transparent;
  stroke-width: 3px;
}
.link-active {
  stroke: #555;
  stroke-opacity: 1;
  fill: transparent;
  stroke-width: 3px;
}
.arrow {
  fill: #555;
  fill-opacity: .3;
}
.arrow-active {
  fill: #555;
  fill-opacity: 1;
}
.text {
  font: 12px sans-serif;
  pointer-events: none;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}
.d3-tip {
  line-height: 1;
  font-weight: bold;
  padding: 12px;
  background: rgba(0, 0, 0, 0.8);
  color: #fff;
  border-radius: 2px;
}

</style>

<script>

graph = {
  "nodes": [
      {"name": "A", "label": "2(1/3) + 1(1/9)"}, 
      {"name": "B", "label": "3(1/3) + 3(1/9) + 2(1/27) + 3(1/81)"}, 
      {"name": "C", "label": "0"}, 
      {"name": "D", "label": "1(1/3) + 1(1/9) + 1(1/27)"},
      {"name": "E", "label": "2(1/3) + 1(1/9) + 2(1/27)"},
      {"name": "F", "label": "1(1/3) + 2(1/9)"}],
  "links": [
      {"source": 0, "target": 2, "value" :1}, 
      {"source": 0, "target": 3, "value" :1}, 
      {"source": 1, "target": 2, "value" :1}, 
      {"source": 1, "target": 3, "value" :1}, 
      {"source": 1, "target": 4, "value" :1},
      {"source": 3, "target": 5, "value" :1},
      {"source": 4, "target": 2, "value" :1},
      {"source": 4, "target": 5, "value" :1},
      {"source": 5, "target": 0, "value" :1}]
};
function get_node(graph, name) {
    // get first node that has a name matching the given name (case-insensitive)
    return graph.nodes.filter(function(node) { return node.name.toUpperCase() == name.toUpperCase(); })[0];
}
var sample_graph = {
    'A': ['C', 'D'],
    'B': ['C', 'D', 'E'],
    'C': [],
    'D': ['F'],
    'E': ['C', 'F'],
    'F': ['A'],
};
var linkedByIndex = {};
graph.links.forEach(function(d) {
  linkedByIndex[d.source + "," + d.target] = true;
});
function isConnected(a, b, origin) {
  return (linkedByIndex[a.index + "," + b.index] && b.index != origin.index) || a.index == b.index;
}

var margin = {top: 10, right: 50, bottom: 20, left: 50},
    width = 960 - margin.left - margin.right,
    height = 550 - margin.top - margin.bottom;

var force = d3.layout.force()
  .nodes(graph.nodes)
  .links(graph.links)
  .charge(-3000)
  .linkDistance(200)
  .size([width, height])
  .on("tick", tick)
  .start();
// Zoom definition
var zoom = d3.behavior.zoom()
  .scaleExtent([1, 10])
  .on("zoom", zoomed);

function zoomed() {
  container.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
}
var svg = d3.select('div#d3example3').append("svg")
  .attr("width", width + margin.left + margin.right)
  .attr("height", height + margin.bottom + margin.top)
  .append("g");

var tip = d3.tip()
  .attr('class', 'd3-tip')
  .offset([-10, 0]);
svg.call(tip);

var rect = svg.append("rect")
  .attr("width", width)
  .attr("height", height)
  .style("fill", "none")
  .style("pointer-events", "all")
  .call(zoom);

var container = svg.append("g");

var defs = container.append("svg:defs");
// build the arrow.
var arrows = defs.selectAll("marker")
  .data(["end", "end-active"]) // Different link/path types can be defined here
  .enter().append("svg:marker") // This section adds in the arrows
  .attr("id", String)
  .attr("viewBox", "0 -5 10 10")
  .attr("refX", 18)
  .attr("refY", -0.8)
  .attr("markerWidth", 6)
  .attr("markerHeight", 6)
  .attr("orient", "auto")
  .append("svg:path")
  .attr("d", "M0,-5L10,0L0,5");
defs.select("#end").attr("class", "arrow");
defs.select("#end-active").attr("class", "arrow-active");
 
var link = container.append("g").selectAll("path")
    .data(force.links())
  .enter().append("path")
    .attr("class", "link")
    .attr("marker-end", "url(#end)");
var node = container.append("g").selectAll(".node")
  .attr("class", "nodes")
  .data(force.nodes())
  .enter().append("g")
  .attr("class", "node")
  .attr("cx", function(d) {
    return d.x;
  })
  .attr("cy", function(d) {
    return d.y;
  })
  .on("mouseover", mouseover)
  .on("mouseout", mouseout)
  .call(force.drag);
node.append("circle")
  .attr("r", 16);
node.append("text")
  .attr("class", "text")
  .attr("x", -3)
  .attr("dy", ".31em")
  .text(function(d) {return d.name;});
function tick() {
  link.attr("d", linkArc);
  node.attr("transform", transform);
}
function transform(d) {
  return "translate(" + d.x + "," + d.y + ")";
}
// makes the arcs
function linkArc(d) {
  var dx = d.target.x - d.source.x,
      dy = d.target.y - d.source.y,
      dr = Math.sqrt(dx * dx + dy * dy);
  return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
}
function simple_paths(node, graph, depth) {
    var paths = [];
    var stack = [];
    (function simple_paths_helper(node, graph, depth) {
        if (depth <= 0) {
            paths.push(stack.slice(0));
            return;
        }
        // record node as visited to prevent cycles
        stack.push(node);
        var unvisited_neighbors = 0;
        var neighbors = graph[node];
        for (var i = 0; i < neighbors.length; i++) {
            if (stack.indexOf(neighbors[i]) === -1) {
                unvisited_neighbors += 1;
                simple_paths_helper(neighbors[i], graph, depth-1);
            } 
        }
        if (unvisited_neighbors === 0) {
            paths.push(stack.slice(0));
        }
        stack.pop(node);
        return;
    })(node, graph, depth);
    return paths;
}
function mouseover(d) {
  // possible depth change here 
  var simple_path_array = simple_paths(d.name, sample_graph, 100);
  // curried get_node function for easy mapping
  var curried_get_node = function (node_name) { return get_node(graph, node_name); };
  for(i = 0; i < simple_path_array.length; i++) { 
    var temp_array = simple_path_array[i].map(curried_get_node);
    for (j = 0; j < temp_array.length - 1; j++){
      var _ = set_highlight(temp_array[j + 1], temp_array[j]);
    }
}
  tip.html("<strong>" + d.name + ": </strong> <span style='color:red'>"
       + d.label + "</span>"
        );
  node.classed("mouseover", tip.show);
  d3.select(this).select("circle").transition()
    .duration(750)
    .attr("r", 16);
}
function mouseout(d) {
  d3.select(this).select("circle").transition()
    .duration(750)
    .attr("r", 16);
  exit_highlight(d);
  node.classed("mouseover", tip.hide);
}
function set_highlight(d, origin) {
  var connected_nodes = [];
  node.attr("class", function(o) {
    if (isConnected(d, o, origin)) {
      connected_nodes.push(o);
      return "node-active";
    } 
    else {
      return d3.select(this).attr("class");
    }
  });
  link.attr("marker-end", function(o) {
    return isLinkForNode(d, o, origin) ? "url(#end-active)" : d3.select(this).attr("marker-end");
  });
  link.attr("class", function(o) {
    return isLinkForNode(d, o, origin) ? "link-active" : d3.select(this).attr("class");
  });
  return connected_nodes;
}
function isLinkForNode(node, link, origin){
  return link.source.index == origin.index && link.target.index == node.index;
}
function exit_highlight(d) {
  node.attr("class", "node");
  link.attr("class", "link");
  link.attr("marker-end", "url(#end)");
}
</script>


Comments can be made here:
